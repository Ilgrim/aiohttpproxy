#!/usr/bin/env python3.4

import argparse
import logging
import asyncio

from aiohttpproxy.error import *
import aiohttpproxy.server
import aiohttpproxy.cache

def parse_options():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-l', '--log-level', dest = 'log_level',            type = str,   default = 'WARNING',
        help = 'Log level (critical, error, warning, info, debug)', metavar = 'LEVEL')
    parser.add_argument(
        '--port', dest = 'listen_port',                     type = int,   default = 8080,
        help = 'TCP port to listen on (default: 8080)', metavar = 'PORT')
    parser.add_argument(
        '--cache-path', dest = 'cache_path',                type = str,   required = True,
        help = 'Cache directory', metavar = 'PATH')
    parser.add_argument(
        '--cache-max-size', dest = 'cache_max_size',        type = int,   default = 1024**2,
        help = 'Max total cache size in bytes', metavar = 'SIZE')
    parser.add_argument(
        '--cache-max-entries', dest = 'cache_max_entries',  type = int,   default = None,
        help = 'Max number of cache entries', metavar = 'COUNT')
    parser.add_argument(
        '--cache-max-age', dest = 'cache_max_age',          type = float, default = None,
        help = 'Max age of cache entries', metavar = 'SECONDS')
    return parser.parse_args()

def main(options):
    numeric_log_level = getattr(logging, options.log_level.upper())
    if not isinstance(numeric_log_level, int):
        raise OptionsError('Invalid log level: {0}'.format(options.log_level))
    logging.basicConfig(level = numeric_log_level)

    port = options.listen_port

    cache = aiohttpproxy.cache.LRUCache(
        options.cache_path,
        options.cache_max_size,
        options.cache_max_entries,
        options.cache_max_age
    )

    loop = asyncio.get_event_loop()

    server_future = loop.create_server(
        lambda: aiohttpproxy.server.ProxyRequestHandler(cache), '', port)
    server = loop.run_until_complete(server_future)
    print('Accepting HTTP proxy requests on {0}:{1} ...'.format(*server.sockets[0].getsockname()))

    try:
        loop.run_forever()
    except KeyboardInterrupt:
        print()
    finally:
        cache.clear()

if __name__ == '__main__':
    options = parse_options()
    main(options)

# vim:sw=4 sts=4
